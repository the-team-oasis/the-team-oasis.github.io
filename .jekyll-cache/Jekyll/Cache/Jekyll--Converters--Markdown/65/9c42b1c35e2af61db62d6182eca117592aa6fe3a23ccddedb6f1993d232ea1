I"s/<h3 id="remote-peering-connection">Remote Peering Connection</h3>
<p>Remote Peering Connection(이하 RPC)는 서로 다른 리전에 있는 VCN을 연결할 때 사용합니다.</p>

<blockquote>
  <p>DRG는 온-프레미스나 서로 다른 리전의 VCN을 연결할 때 가상 라우터 역할을 하는 게이트웨이입니다.</p>
</blockquote>

<p>동일 리전의 서로 다른 VCN을 연결하는 경우에는 <strong>Local Peering Gateway</strong>를 사용합니다. <strong>Local Peering Gateway</strong>에 대해서는 다음 포스트를 참고합니다.</p>

<p><a href="https://the-team-oasis.github.io/infrastructure/oci-local-peering/">OCI Local Peering - 동일 리전에서 서로 다른 VCN간 연결하기</a></p>

<p>다음 다이어그램은 <strong>RPC</strong>를 사용하여 동일 리전의 서로 다른 VCN을 연결하는 다이어그램입니다. 연결하고자 하는 각 VCN에 Dynamic Routing Gateway(이하 DRG)를 붙이고, DRG에 Remote Peering Connection을 구성하여 연결하는 구성입니다.
<img src="/assets/img/infrastructure/2022/network_remote_peering_basic.png" alt="" /></p>

<blockquote>
  <p>주의: Peering을 연결하는 두 VCN은 서로 CIDR이 겹치지 않아야 합니다.</p>
</blockquote>

<p>Peering은 일반적으로 두 개의 VCN을 연결하는 단일 Peering 관계이지만, 하나의 VCN(ex. VCN-1)과 여러개의 VCN(ex. VCN-1-1, VCN-1-2, VCN-1-3)을 연결하는 1:n 관계로 구성도 할 수 있습니다. 이 때 VCN-1과 Peering되는 3개의 VCN은 서로 겹치는 CIDR를 가질 수 있습니다.</p>

<h3 id="수락자-및-요청자">수락자 및 요청자</h3>
<p>만일 두 개의 VCN을 관리하는 관리자가 서로 다른 경우에는 수락자는 수락자의 구획에 있는 LPG에 연결할 수 있는 권한을 요청자에게 부여 하는 특정 IAM 정책을 생성해야 합니다. 해당 정책이 없으면 요청자의 연결 요청이 실패합니다. IAM 설정과 관련해서는 다음 링크를 참고합니다.</p>

<p><a href="https://docs.oracle.com/en-us/iaas/Content/Network/Tasks/remoteVCNpeering.htm#Step1">https://docs.oracle.com/en-us/iaas/Content/Network/Tasks/remoteVCNpeering.htm#Step1</a></p>

<blockquote>
  <p>여기서는 한 명의 관리자가 모든 VCN을 관리한다는 전제하에 구성할 예정이므로, 별도의 IAM 정책을 구성하지 않습니다.</p>
</blockquote>

<h3 id="두-개의-vcn-생성">두 개의 VCN 생성</h3>
<p>실습을 위한 두 개의 VCN을 준비합니다. <strong>VCN 마법사</strong>를 활용하여 다음과 같이 VCN을 생성합니다.</p>

<p>VCN 생성은 다음 가이드를 참고합니다.</p>

<p><a href="https://the-team-oasis.github.io/getting-started/create-vcn/">OCI에서 VCN Wizard를 활용하여 빠르게 VCN 생성하기</a></p>

<ul>
  <li><strong>Region:</strong> Seoul</li>
  <li><strong>VCN 이름:</strong> oci-hubvcn</li>
  <li><strong>VCN CIDR 블록:</strong> 172.16.0.0/16</li>
  <li><strong>공용 서브넷 CIDR 블록:</strong> 172.16.0.0/24</li>
  <li>
    <p><strong>전용 서브넷 CIDR 블록:</strong> 172.16.1.0/24</p>
  </li>
  <li><strong>Region:</strong> Tokyo</li>
  <li><strong>VCN 이름:</strong> oci-hubvcn2</li>
  <li><strong>VCN CIDR 블록:</strong> 173.16.0.0/16</li>
  <li><strong>공용 서브넷 CIDR 블록:</strong> 173.16.0.0/24</li>
  <li><strong>전용 서브넷 CIDR 블록:</strong> 173.16.1.0/24</li>
</ul>

<h3 id="dynamic-routing-gatewaydrg-및-remote-peering-connection-생성">Dynamic Routing Gateway(DRG) 및 Remote Peering Connection 생성</h3>

<h4 id="drg-생성">DRG 생성</h4>
<p>먼저 각 리전에 DRG를 생성합니다. DRG를 생성하기 위해서는 <strong>메뉴 &gt; 네트워킹(Networking) » Customer Connectivity(고객 접속) Dynamic Routing Gateways(동적 경로 지정 게이트웨이)</strong>로 이동합니다.</p>

<p><img src="/assets/img/infrastructure/2022/oci-remote-peering-1.png" alt="" /></p>

<p><strong>동적 경로 지정 게이트웨이 생성(Create Dynamic Routing Gateway)</strong> 버튼을 클릭한 후 다음 이름으로 DRG를 생성합니다.</p>

<ul>
  <li><strong>Region:</strong> Seoul</li>
  <li>
    <p><strong>DRG 이름:</strong> DRG-OCI-HUB</p>
  </li>
  <li><strong>Region:</strong> Tokyo</li>
  <li><strong>DRG 이름:</strong> DRG-OCI-HUB2</li>
</ul>

<h4 id="가상-클라우드-네트워크-연결-생성create-virtual-cloud-network-attachment">가상 클라우드 네트워크 연결 생성(Create Virtual Cloud Network Attachment)</h4>
<p>생성한 DRG를 VCN에 연결하여야 합니다. 생성된 각 DRG를 클릭한 후 <strong>가상 클라우드 네트워크 연결 생성</strong> 버튼을 클릭하여 다음과 같이 연결 생성을 합니다.</p>

<ul>
  <li><strong>Region:</strong> Seoul</li>
  <li><strong>DRG 이름:</strong> DRG-OCI-HUB-ATT</li>
  <li>
    <p><strong>VCN:</strong> oci-hubvcn</p>
  </li>
  <li><strong>Region:</strong> Tokyo</li>
  <li><strong>DRG 이름:</strong> DRG-OCI-HUB2-ATT</li>
  <li><strong>VCN:</strong> oci-hubvcn2</li>
</ul>

<p><strong>Seoul</strong>
<img src="/assets/img/infrastructure/2022/oci-remote-peering-2.png" alt="" /></p>

<p><strong>Tokyo</strong>
<img src="/assets/img/infrastructure/2022/oci-remote-peering-3.png" alt="" /></p>

<h4 id="remote-peering-connectionrpc-생성">Remote Peering Connection(RPC) 생성</h4>
<p><strong>원격 피어링 접속 연결(Remote Peering Connections Attachments)</strong>을 생성합니다. 생성한 각 DRG를 클릭한 후 다음과 같이 RPC 연결을 생성합니다.</p>

<ul>
  <li><strong>Region:</strong> Seoul</li>
  <li>
    <p><strong>RPC 이름:</strong> RPC-1</p>
  </li>
  <li><strong>Region:</strong> Tokyo</li>
  <li><strong>RPC 이름:</strong> RPC-2</li>
</ul>

<p><strong>RPC-1</strong> 또는 <strong>RPC-2</strong>의 OCID 값을 복사하여 다른 쪽의 RPC에서 연결 작업을 수행합니다. 여기서는 <strong>RPC-2</strong>의 OCID 값을 활용하여 <strong>RPC-1</strong>에서 연결 작업을 수행하도록 합니다.</p>

<p><strong>RPC-2</strong>의 OCID값을 얻기 위해서는 먼저 앞서 생성한 <strong>RPC-2 연결</strong>의 <strong>Remote Peering Connection(원격 피어링 접속)</strong> 항목의 <strong>RPC-2</strong>를 선택합니다.</p>

<p><img src="/assets/img/infrastructure/2022/oci-remote-peering-4.png" alt="" /></p>

<p>다음과 같이 OCID 값을 복사합니다.
<img src="/assets/img/infrastructure/2022/oci-remote-peering-4-1.png" alt="" /></p>

<p>다시 <strong>RPC-1 연결</strong>로 이동한 후 <strong>원격 피어링 접속(Remote Peering Connection)</strong> 항목에 있는 <strong>RPC-1</strong>을 선택합니다.</p>

<p><img src="/assets/img/infrastructure/2022/oci-remote-peering-5.png" alt="" /></p>

<p><strong>연결 설정</strong>을 선택한 후 지역을 <strong>ap-tokyo-1(도쿄)</strong>, <strong>원격 피어링 접속 OCID</strong>를 앞서 복사한 OCID로 입력한 후 <strong>연결 설정</strong>을 클릭합니다.
<img src="/assets/img/infrastructure/2022/oci-remote-peering-6.png" alt="" /></p>

<p>연결이 되면 다음과 같이 피어링 상태가 <strong>피어링됨</strong>으로 변경됩니다.
<img src="/assets/img/infrastructure/2022/oci-remote-peering-7.png" alt="" /></p>

<h3 id="경로-테이블routing-table과-보안-목록security-list-설정">경로 테이블(Routing Table)과 보안 목록(Security List) 설정</h3>
<h4 id="경로-테이블-설정">경로 테이블 설정</h4>
<p>테스트를 위한 VM 인스턴스는 각 VCN의 공용 서브넷(Public Subnet)을 사용할 것입니다. 따라서 공용 서브넷에 구성된 경로 테이블(Routing Table)을 활용할 것입니다. 먼저 각 리전의 VCN을 선택한 후에 다음과 같이 기본 생성된 경로 테이블을 선택한 후 경로 규칙(Routing Rule)을 추가합니다.</p>

<ul>
  <li><strong>Region:</strong> Seoul</li>
  <li><strong>Routing Table:</strong> Default Route Table for oci-hubvcn</li>
  <li><strong>Routing Rule:</strong>
    <ul>
      <li><strong>Destination(대상):</strong> 173.16.0.0/16</li>
      <li><strong>Target Type(대상 유형):</strong> 173.16.0.0/16</li>
      <li><strong>Target(대상):</strong> DRG-OCI-HUB</li>
    </ul>
  </li>
</ul>

<hr />

<ul>
  <li><strong>Region:</strong> Tokyo</li>
  <li><strong>Routing Table:</strong> Default Route Table for oci-hubvcn2</li>
  <li><strong>Routing Rule:</strong>
    <ul>
      <li><strong>Destination(대상):</strong> 172.16.0.0/16</li>
      <li><strong>Target Type(대상 유형):</strong> 172.16.0.0/16</li>
      <li><strong>Target(대상):</strong> DRG-OCI-HUB2</li>
    </ul>
  </li>
</ul>

<p><strong>Seoul</strong>
<img src="/assets/img/infrastructure/2022/oci-remote-peering-8.png" alt="" /></p>

<p><strong>Tokyo</strong>
<img src="/assets/img/infrastructure/2022/oci-remote-peering-9.png" alt="" /></p>

<h4 id="보안-목록-설정">보안 목록 설정</h4>
<p>보안 목록에서는 테스트를 위해 서로 모든 프로토콜에 대해 모든 포트를 오픈하도록 하겠습니다. 각 VCN의 <strong>보안 목록</strong>에서 다음과 같이 <strong>수신 규칙(Ingress Rules)</strong>를 추가합니다.</p>

<ul>
  <li><strong>Region:</strong> Seoul</li>
  <li><strong>보안 목록(Security List):</strong> Default Security List for oci-hubvcn</li>
  <li><strong>소스 유형(Source Type):</strong> CIDR</li>
  <li><strong>소스 CIDR(Source CIDR):</strong> 173.16.0.0/16</li>
  <li>
    <p><strong>IP 프로토콜:</strong> 모든 프로토콜</p>
  </li>
  <li><strong>Region:</strong> Tokyo</li>
  <li><strong>보안 목록(Security List):</strong> Default Security List for oci-hubvcn2</li>
  <li><strong>소스 유형(Source Type):</strong> CIDR</li>
  <li><strong>소스 CIDR(Source CIDR):</strong> 172.16.0.0/16</li>
  <li><strong>IP 프로토콜:</strong> 모든 프로토콜</li>
</ul>

<p><strong>Seoul</strong>
<img src="/assets/img/infrastructure/2022/oci-remote-peering-10.png" alt="" /></p>

<p><strong>Tokyo</strong>
<img src="/assets/img/infrastructure/2022/oci-remote-peering-11.png" alt="" /></p>

<h3 id="접속-테스트">접속 테스트</h3>
<p>이제 각 리전의 공용 서브넷에 VM 인스턴스를 하나씩 생성한 후에 연결을 테스트해보도록 하겠습니다. 리눅스 인스턴스 생성 및 접속 방법은 아래 포스팅을 참고합니다.</p>

<p><a href="http://localhost:4000//getting-started/launching-linux-instance/">OCI에서 리눅스 인스턴스 생성 튜토리얼</a></p>

<ul>
  <li><strong>Region:</strong> Seoul</li>
  <li><strong>인스턴스 Public IP:</strong> 130.162.137.87</li>
  <li>
    <p><strong>인스턴스 Private IP:</strong> 172.16.0.208</p>
  </li>
  <li><strong>Region:</strong> Tokyo</li>
  <li><strong>인스턴스 IP:</strong> 158.101.138.220</li>
  <li><strong>인스턴스 Private IP:</strong> 173.16.0.156</li>
</ul>

<p><strong>Seoul -&gt; Tokyo</strong></p>
<div class="language-terminal highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>ssh <span class="nt">-i</span> &lt;private_key_file&gt; opc@130.162.137.87
<span class="go">
</span><span class="gp">$</span><span class="w"> </span>ping 173.16.0.156
<span class="go">PING 173.16.0.156 (173.16.0.156) 56(84) bytes of data.
64 bytes from 173.16.0.156: icmp_seq=1 ttl=62 time=33.2 ms
64 bytes from 173.16.0.156: icmp_seq=2 ttl=62 time=33.2 ms
</span></code></pre></div></div>

<p><strong>Tokyo -&gt; Seoul</strong></p>
<div class="language-terminal highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>ssh <span class="nt">-i</span> &lt;private_key_file&gt; opc@158.101.138.220
<span class="go">
</span><span class="gp">$</span><span class="w"> </span>ping 172.16.0.208
<span class="go">PING 172.16.0.208 (172.16.0.208) 56(84) bytes of data.
64 bytes from 172.16.0.208: icmp_seq=1 ttl=62 time=33.10 ms
64 bytes from 172.16.0.208: icmp_seq=2 ttl=62 time=33.10 ms
</span></code></pre></div></div>
:ET